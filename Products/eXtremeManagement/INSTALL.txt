Installation

  Just install eXtremeManagement like you would any other Plone
  product: put it in its own directory within the Products dir of your
  zope instance.

  If you use instancemanager
  (http://plone.org/products/instance-manager), then see:
  https://svn.zestsoftware.nl/svn/zest/eXtremeManagement/integration/trunk/instancemanager.py


RECOMMENDED PRODUCTS:

  * Plone 2.1.3:

  http://plone.org/products/plone/releases/2.1.3

  This already contains the needed Archetypes mentioned in the
  dependencies.

  * Poi bundle; at Zest Software we are using

  http://plone.org/products/poi/releases/1.0/poi-1-0rc2pre1-bundle-tar.gz

  This already contains DataGridField and AddRemoveWidget (and
  intelligenttext) which we depend upon.

DEPENDENCIES

  The products mentioned above should give you all you need.  To spell
  them out:

  * Archetypes 1.3.x (used 1.3.7-final from Plone 2.1.3)

  * Poi (see above)

  * DataGridField:
    http://svn.plone.org/svn/archetypes/MoreFieldsAndWidgets/DataGridField/trunk

  * AddRemoveWidget:  
    http://svn.plone.org/svn/archetypes/MoreFieldsAndWidgets/AddRemoveWidget/trunk

  * and of course Plone (tested with 2.1 series) and Zope (tested with
  2.8 series).


Additional dependencies for development

 * PloneTestCase:
   https://svn.plone.org/svn/collective/PloneTestCase/trunk/ or the
   latest tar.gz (install as a product).

 * ZopeTestCase:
   http://www.zope.org/Members/shh/ZopeTestCase/0.9.6
   (needs to be installed in ZOPE_HOME/lib/python/Testing/ZopeTestCase)
   This is included in Zope 2.8 and above.  Never mind the version
   number then.

 * DocFinderTab is also recommended.:
   http://plone.org/products/DocfinderTab


Skins

   Just so you know: eXtremeManagement by default installs its own
   skin.


Migration from before release 1.0

 * If you have been using the subversion trunk from before the first
   official release, then you may have a migration issue.  The
   workflow for Tasks has been simplified, which means some old states
   now don't exist anymore.  Upon reinstall the migration code will
   take care of this.  Assigned and estimated tasks are set to the
   open state.  In-progress tasks normally get the to-do status.  In a
   few cases this may not work.  When that in-progress task doesn't
   have an estimate (or rather: it is 0) or it doesn't have any
   assignees, then it will go to the open state instead.  If you don't
   like that, you can fix those tasks by hand either before or after
   the migration.  The reinstall will leave a url and explanation for
   each offending task in the install log.
